import random
import typing

from PIL import Image

ASCII_VALUES = list(range(97, 123)) + [32, 33, 44, 46, 63]  # "a"-"z", " ", "!", ",", "."


def generate_alphabet_a(key: str) -> dict:
    """Generates the A-channel offset of each character in the alphabet using a pre-set key."""
    random.seed(key)
    alphabet = {}
    for i in ASCII_VALUES:
        value = random.randint(1, len(ASCII_VALUES) + 1)
        while value in alphabet.values():
            value = random.randint(1, len(ASCII_VALUES) + 1)
        alphabet[chr(i)] = value
    return alphabet


def write_message_a(image: Image.Image, message: str, key: str) -> typing.Tuple[Image.Image, bool]:
    """
    Writes the given message to the source image given using the generated A-channel offsets.

    Also supplies a boolean to clarify if the message was successfully written to the image.
    """
    alphabet = generate_alphabet_a(key)
    if image.mode != "RGBA":
        image = image.convert("RGBA")
    if image.size[0] * image.size[1] < len(message):
        return image, False  # Too large to encode message, so return original image and throw error to client
    xc = []
    yc = []
    coords = []
    for i in range(len(message)):
        xc.append(random.randint(0, image.size[0]))
        yc.append(random.randint(0, image.size[1]))
    xc.sort()
    yc.sort()
    for i in range(len(message)):
        coords.append((xc[i], yc[i]))
    for i, letter in enumerate(message):
        if not (ord(letter) in ASCII_VALUES):
            return image, False
        pixel = list(image.getpixel(coords[i]))
        pixel[-1] -= alphabet[letter]
        image.putpixel(coords[i], tuple(pixel))
    return image, True


def read_message_a(image: Image.Image, key: str) -> str:
    """Reads a message from an image encoded with write_message."""
    alphabet = generate_alphabet_a(key)
    message = ""
    for i in image.getdata():
        if i[-1] != 255:
            message += list(alphabet.keys())[list(alphabet.values()).index(255 - i[-1])]
    return message


def generate_alphabet_rgb(key: str) -> dict:
    """Generates the RGB values that correspond to each character in ASCII_VALUES."""
    random.seed(key)
    alphabet = {}
    for i in ASCII_VALUES:
        color = [random.randint(0, 255) for _ in range(3)]
        while color in alphabet.values():
            color = [random.randint(0, 255) for _ in range(3)]
        alphabet[chr(i)] = color
    return alphabet


def write_message_rgb(message: str, key: str) -> typing.Tuple[Image.Image, bool]:
    """Generates an image with random RGB values with the RGB values from generate_alphabet used to encode a message."""  # noqa: E501
    alphabet = generate_alphabet_rgb(key)
    image = Image.new("RGB", (900, 600))
    if len(message) > 600 * 900:
        return None, False
    xc = []
    yc = []
    coords = []
    for i in range(len(message)):
        xc.append(random.randint(0, 900))
        yc.append(random.randint(0, 600))
    xc.sort()
    yc.sort()
    for i in range(len(message)):
        coords.append((xc[i], yc[i]))
    for i, letter in enumerate(message):
        if not ord(letter) in ASCII_VALUES:
            return None, False
        image.putpixel(coords[i], tuple(alphabet[letter]))
    for x in range(900):
        for y in range(600):
            color = [random.randint(0, 255) for _ in range(3)]
            while color in alphabet.values():
                color = [random.randint(0, 255) for _ in range(3)]
            if image.getpixel((x, y)) == (0, 0, 0):
                image.putpixel((x, y), tuple(color))
    return image, True


def read_message_rgb(image: Image.Image, key: str) -> str:
    """Reads message from image generated by write_message_a."""
    alphabet = generate_alphabet_rgb(key)
    message = ""
    for i in image.getdata():
        if list(i) in alphabet.values():
            message += list(alphabet.keys())[list(alphabet.values()).index(list(i))]
    return message
